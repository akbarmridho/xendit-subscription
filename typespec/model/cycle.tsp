import "./enum.tsp";

enum CycleType {
    SCHEDULED: "SCHEDULED",
    IMMEDIATE: "IMMEDIATE",
}

enum CycleStatus {
    SCHEDULED: "SCHEDULED",
    PENDING: "PENDING",
    RETRYING: "RETRYING",
    FAILED: "FAILED",
    SUCCEEDED: "SUCCEEDED",
    CANCELLED: "CANCELLED",
}

enum AttemptDetailEnum {
    SUCCEEDED: "SUCCEEDED",
    FAILED: "FAILED",
    PENDING: "PENDING",
}

model Cycle {
    @doc("Xendit-generated recurring cycle ID, with prefix recy-xxx")
    id: string;

    @doc("Xendit-generated recurring plan ID, with prefix repl-xxx")
    plan_id: string;

    @doc("Merchant-provided identifier, inherited from the recurring plan object.")
    @minLength(1)
    @maxLength(64)
    reference_id: string;

    @doc("Xendit-generated customer ID, inherited from the recurring plan object, with prefix cust-xxx")
    customer_id: string;

    @doc("The type of recurring action requested, inherited from the recurring plan object")
    recurring_action: "PAYMENT";

    @doc("The type of recurring cycle")
    type: CycleType;

    @doc("A numbering that tracks the order of cycle objects generated by a recurring plan.")
    @minValue(1)
    cycle_number: int32;

    @doc("Number of times the recurring action has been attempted for this recurring cycle object")
    attempt_count: int32;

    @doc("Detailed information of each action attempts")
    attempt_details: AttemptDetail[];

    @doc("Status of recurring cycle")
    status: CycleStatus;

    @doc("ISO 8601 Timestamp for the upcoming action attempt for the recurring cycle")
    scheduled_timestamp: string;

    @doc("ISO 8601 Timestamp for recurring cycle creation. Timezone UTC+0")
    created: utcDateTime;

    @doc("ISO 8601 Timestamp for latest cycle object update. Timezone UTC+0")
    updated: utcDateTime;

    @doc("ISO 4217 currency code of recurring plan")
    currency: CurrencyEnum;

    @doc("Amount that recurring plan will charge to end users. Min - IDR 1,000 (Indonesia) / PHP 50 (Philippines)")
    amount: int32;

    failure_code?: string;

    @doc("Object of additional information the merchants may use")
    metadata?: Record<unknown>;

    forced_attempt_count: int32;
}

model AttemptDetail {
    type: string;

    @doc("A numbering that tracks the order of cycle attempts")
    attempt_number: int32;

    @doc("ISO 8601 Timestamp for attempted actions. Timezone UTC+0")
    created: utcDateTime;

    @doc("ID of associated action (e.g. payment ID)")
    action_id: string;

    @doc("Status of action")
    status: AttemptDetailEnum;

    @doc("Reason for failure of recurring action in this attempt")
    failure_code?: string;

    @doc("ISO 8601 Estimated timestamp for next retry. Timezone UTC+0")
    next_retry_timestamp?: utcDateTime;

    payment_link?: string;
    action_number?: int32;
}
